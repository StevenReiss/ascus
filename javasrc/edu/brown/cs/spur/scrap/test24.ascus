@Ascus(source="GITREPO:https://github.com/Ruhrpottattacke/easyhttpserver/blob/781647b3ce1dc6d2f8261b6caf3844a6cc0cb532/src/main/java/easyhttpserver/HttpServe
r.java")
@Ascus(library="com.sun.net.httpserver:http:20070405")
@Ascus(library="org.junit.platform:junit-platform-console-standalone:1.8.1")
@Ascus(search="PACKAGE,PACKAGE_USED,500,GITREPO")
@Ascus(keywords={"@lightweight","@http","server"})
@Ascus(keyterms={"server","request","ftp","@lightweight","uri","url","routing","application","port","response","property","http","callback","https","@http"})

@Ascus(suggestedTerms={"exchange","logger","response","finest","server","handler"})
package edu.brown.cs.SAMPLE;

import edu.brown.cs.sump.annot.Ascus;
import edu.brown.cs.sump.annot.AscusPackage;
import edu.brown.cs.sump.annot.AscusClass;
import com.sun.net.httpserver.HttpExchange;

@AscusPackage
public interface HttpServer {


@AscusClass
interface HttpHandler {
   void handle(HttpExchange exchange);
}

@AscusClass(uses={HttpHandler.class})
abstract class RawHandler implements com.sun.net.httpserver.HttpHandler {
   public RawHandler(HttpHandler handler) { }
   public abstract void handle(HttpExchange exchange);
}

@AscusClass
abstract class HttpServer {
   public HttpServer(int port,int threads,int backlog) { }
   public abstract void start();
   public abstract void stop(int delay);
   public abstract void stop();
   public abstract void createContext(String path,HttpHandler handler);
   public abstract void removeContext(String path);
   public abstract boolean isRunning();
}

@AscusClass
abstract class HttpExchange {
   private String response;
   public HttpExchange(HttpExchange exchange) { }
   public abstract void setResponse(String response);
}

}

