@Ascus(source="GITREPO:https://github.com/Priytam/auto/blob/82924424b16b5a67e24ec852727be62af722b431/exampleApp/src/mai
n/java/com/auto/reqres/operation/GetUserOp.java")
@Ascus(library="org.apache.commons:commons-lang3:3.10")
@Ascus(library="com.google.code.java-allocation-instrumenter:java-allocation-instrumenter:3.2.0")
@Ascus(search="PACKAGE,PACKAGE_USED,500,GITREPO")
@Ascus(keywords={"@embedded","@web","server"})
@Ascus(keyterms={"server","request","ftp","@web","uri","url","routing","application","port","response","@embedded","pro
perty","http","callback","https"})
@Ascus(suggestedTerms={"request","mime","time","response","header","builder"})
package edu.brown.cs.sample;

import edu.brown.cs.sump.annot.Ascus;
import edu.brown.cs.sump.annot.AscusPackage;
import edu.brown.cs.sump.annot.AscusClass;
import java.net.HttpURLConnection;
import java.util.List;

@AscusPackage
public interface EmbeddedWebServer {


/**
 * User: Priytam Jee Pandey Date: 28/05/20 Time: 1:17 pm email: mrpjpandey@gmail.com
 */
@AscusClass
abstract class HttpOpRequest implements OpRequest {
   private int statusCode;
   private StringBuffer output;
   private String requestBody;
   public HttpOpRequest(CharSequence url,HttpMethods method,String sName,int timeOut) { }
   public abstract void setContentType(String sContentType);
   public abstract void setHeader(String sKey,String sValue);
   public abstract HttpOpRequest sendRequest();
   public abstract HttpURLConnection getConnection();
   public abstract CharSequence getUrl();
   public abstract void setContent(String requestBody);
}

@AscusClass(uses={HttpRequestBuilder.class})
class HttpRequestBuilder_Header {
   public String key;
   public String value;
}

/**
 * User: Priytam Jee Pandey Date: 28/05/20 Time: 1:17 pm email: mrpjpandey@gmail.com
 */
@AscusClass
enum HttpMethods {
POST, GET, DELETE, PUT, HEAD,
OPTIONS;
   public abstract String toString();
}

/**
 * User: Priytam Jee Pandey Date: 28/05/20 Time: 1:17 pm email: mrpjpandey@gmail.com
 */
@AscusClass
interface OpRequest {
   String getCommandName();
}

/**
 * User: Priytam Jee Pandey Date: 28/05/20 Time: 1:17 pm email: mrpjpandey@gmail.com
 */
@AscusClass
interface OpResult {
   int getExitStatus();
   List<String> getStdOut();
   List<String> getStdErr();
   long getExecutionTime();
   String toStringAsOneLine();
}

/**
 * User: Priytam Jee Pandey Date: 28/05/20 Time: 1:17 pm email: mrpjpandey@gmail.com
 */
@AscusClass(uses={HttpRequestBuilder_Header.class,HttpOpRequest.class,HttpMethods.class})
abstract class HttpRequestBuilder {
   public abstract HttpRequestBuilder withBaseUrl(String sBaseUrl);
   public abstract HttpRequestBuilder withRequestBody(String sRequestBody);
   public abstract HttpRequestBuilder withRequestType(HttpMethods eRequestType);
   public abstract HttpOpRequest build();
}

/**
 * User: Priytam Jee Pandey Date: 28/05/20 Time: 1:17 pm email: mrpjpandey@gmail.com
 */
@AscusClass(uses={OpResult.class,OpRequest.class})
interface Operation {
   void execute();
   OpRequest getRequest();
   OpResult getResult();
   boolean shouldRunInBackground();
   String getName();
}

}

