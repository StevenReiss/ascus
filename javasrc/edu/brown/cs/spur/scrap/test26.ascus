@Ascus(source="GITREPO:https://github.com/Linkster78/Simple-HTTP-Server/blob/dfb1f85e9c5570d15872970a1239ad527535f5f9/src/com/tek/http/HTTPResponse.java")
@Ascus(search="PACKAGE,PACKAGE_USED,500,GITREPO")
@Ascus(keywords={"@lightweight","@http","server"})
@Ascus(keyterms={"server","request","ftp","@lightweight","uri","url","routing","application","port","response","property","http","callback","https","@http"})


@Ascus(suggestedTerms={"scanner","header","socket","builder","headers","buffer"})
package edu.brown.cs.SAMPLE;

import edu.brown.cs.sump.annot.Ascus;
import edu.brown.cs.sump.annot.AscusPackage;
import edu.brown.cs.sump.annot.AscusClass;
import java.net.Socket;
import java.util.List;
import java.util.function.BiConsumer;

@AscusPackage
public interface HTTPResponse {


@AscusClass(uses={HTTPParameter.class,HTTPHeader.class,HTTPMethod.class})
abstract class HTTPRequest {
   private HTTPMethod method;
   private String body;
   private String path;
   private List<HTTPParameter> params;
   private String http;
   private List<HTTPHeader> headers;
   public HTTPRequest(String method,String path,List<HTTPParameter> params,String http,List<HTTPHeader> headers,String body) { }
   public abstract String toString();
}

@AscusClass
abstract class HTTPParameter {
   public String parameter;
   private String value;
   public HTTPParameter(String parameter,String value) { }
}

@AscusClass(uses={HTTPRequest.class})
abstract class HTTPServer {
   public HTTPServer(int port) { }
   public abstract void bind(BiConsumer<HTTPRequest,HTTPContext> callback);
}

@AscusClass
enum HTTPMethod {
GET, HEAD, POST, PUT, DELETE,
CONNECT, OPTIONS, TRACE
}

@AscusClass(uses={HTTPHeader.class})
abstract class HTTPResponse {
   public HTTPResponse() { }
   public abstract void setHeader(String header,String value);
   public abstract String toString();
}

@AscusClass
abstract class HTTPContext {
   public HTTPContext(Socket socket) { }
   public abstract void appendResponse(String text);
   public abstract void appendResponse(HTTPResponse response);
}

@AscusClass
abstract class HTTPHeader {
   private String header;
   private String value;
   public HTTPHeader(String header,String value) { }
}

}

