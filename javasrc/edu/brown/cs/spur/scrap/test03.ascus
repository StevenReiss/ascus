@Ascus(source="GITREPO:https://github.com/kasra-sh/PicoHTTPd/blob/d1f5426a1cde4857fde7247ed77a680567b1e135/src/main/java/ir/kasra_sh/picohttpd/server/interfaces/HTTPHandler.java")
@Ascus(search="PACKAGE,PACKAGE_USED,500,GITREPO")
@Ascus(keywords={"@embedded","@web","server"})
@Ascus(keyterms={"server","request","ftp","@web","uri","url","routing","application","port","response","@embedded","property","http","callback","https"})
package edu.brown.cs.SAMPLE;

import edu.brown.cs.sump.annot.Ascus;
import edu.brown.cs.sump.annot.AscusPackage;
import edu.brown.cs.sump.annot.AscusClass;
import java.io.InputStream;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentHashMap;

@AscusPackage
public interface HTTPHandler {


@AscusClass(uses={Cookie.class})
abstract class Response {
   private int status;
   private InputStream s_body;
   private int s_body_len;
   private ArrayList<Cookie> cookies;
   private ArrayList<Map.Entry<String,String>> headers;
   private boolean stream_body;
   public abstract Response type(String mime);
   public abstract Response body(byte[] body);
   public abstract Response body(byte[] body,String mime);
   public abstract Response bodyJson(byte[] body);
   public abstract Response bodyHtml(byte[] body);
   public abstract Response bodyText(byte[] body);
   public abstract Response bodyBinary(byte[] body);
   public abstract Response header(String k,String v);
   public abstract byte[] asByteArray();
   public abstract Response setCookie(String key,String value,String[] opts);
   public abstract Response setMime(String mime);
}

@AscusClass
abstract class Cookie {
   private StringBuilder cookie_builder;
   public abstract Cookie set(String key,String value);
   public abstract Cookie opt(String op);
}

@AscusClass
interface FailListener {
   void onFail(SocketChannel s);
}

@AscusClass
interface HTTPHandler {
   void handleRequest(Request r,ResponseWriter w);
}

@AscusClass
abstract class NIOSocketReader {
   private boolean socket_finished;
   public NIOSocketReader(SocketChannel channel) { }
   public abstract void finish();
   public abstract String readLine();
   public abstract boolean readRemaining(byte[] b);
}

@AscusClass(uses={WriteListener.class})
abstract class ResponseWriter {
   public ResponseWriter(WriteListener listener,SocketChannel socketChannel) { }
   public abstract void write(Response r);
}

@AscusClass(uses={NIOSocketReader.class,Request.class})
abstract class RequestParser {
   private boolean has_body;
   private Request the_req;
   public RequestParser(NIOSocketReader reader) { }
   public abstract boolean readBody();
}

@AscusClass
interface AcceptListener {
   void onAccept(SocketChannel socketChannel);
}

@AscusClass
abstract class Request {
   private String version_string;
   private SocketAddress req_address;
   private HTTPMethod req_method;
   private ConcurrentHashMap<String,String> req_args;
   private String req_url;
   private byte[] req_body;
   private ConcurrentHashMap<String,String> req_headers;
   public Request() { }
   public abstract Request method(HTTPMethod m);
   public abstract Request setVersion(String ver);
   public abstract Request putArg(String k,String v);
   public abstract Request putHeader(String k,String v);
   public abstract Request putHeader(String k,String[] vs);
   public abstract Request contentLength(int len);
   public abstract void setUrl(String url);
}

@AscusClass
interface WriteFinishListener {
   void onWriteFinished(SocketChannel socketChannel);
}

@AscusClass
interface ReadListener {
   void onReadFinished(SocketChannel channel,RequestParser parser);
}

@AscusClass
interface WriteListener {
   void onWrite(SocketChannel s,byte[] b);
   void onWriteStream(SocketChannel s,byte[] data,InputStream is,long len);
}

}
