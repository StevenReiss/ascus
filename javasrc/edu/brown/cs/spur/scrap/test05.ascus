@Ascus(source="GITREPO:https://github.com/kasra-sh/MikroServer/blob/e7430270310a5e233711289b37da97d6fb8b2f71/src/main/java/ir/kasra_sh/MikroServer/MultiHandler.java")
@Ascus(library="com.google.zetasketch:zetasketch:0.1.0")
@Ascus(library="co.paralleluniverse:quasar-core:0.8.0")
@Ascus(search="PACKAGE,PACKAGE_USED,500,GITREPO")
@Ascus(keywords={"@embedded","@web","server"})
@Ascus(keyterms={"server","request","ftp","@web","uri","url","routing","application","port","response","@embedded","property","http","callback","https"})
@Ascus(suggestedTerms={"application","case","static","socket","video","string"})
package edu.brown.cs.SAMPLE;

import edu.brown.cs.sump.annot.Ascus;
import edu.brown.cs.sump.annot.AscusPackage;
import edu.brown.cs.sump.annot.AscusClass;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;

@AscusPackage
public interface MultiHandler {


@AscusClass(uses={MimeTypes.class})
enum MimeTypes_Model {

}

@AscusClass(uses={SocketListener.class})
abstract class Mikro {
   public Mikro() { }
   public abstract void addHandler(Class<Object> h);
   public abstract void addFileHandler(String dir,Class<Object> h);
   public abstract void start(int port,int parallelism,boolean useFibers);
}

@AscusClass(uses={ResponseWriter.class,Request.class,HTTPConnection.class})
abstract class HTTPHandler {
   public String CONTEXT;
   public abstract void setConnection(HTTPConnection conn);
}

@AscusClass
abstract class ResponseHeader {
   public ResponseHeader() { }
   public abstract void setStatus(int responseCode);
   public abstract void setContentLength(int length);
   public abstract void setContentTypeByExtension(String ext);
   public abstract void setContentType(String type);
   public abstract void setProperty(String name,String value);
   public abstract String getProperty(String name);
   public abstract String getFullHeader();
}

@AscusClass(uses={HTTPMethod.class,HTTPConnection.class})
abstract class Request {
   private HTTPConnection conn;
   public Request(HTTPConnection con) { }
   public abstract int getContentLength();
   public abstract String getArg(String name);
   public abstract String getHeader(String name);
}

@AscusClass(uses={HTTPConnection.class})
abstract class ReverseProxy implements Runnable {
   public ReverseProxy(InetSocketAddress dest,HTTPConnection conn) { }
   public abstract void run();
}

@AscusClass(uses={MimeTypes.class})
enum MimeTypes_Message {

}

@AscusClass
class MimeTypes {
}

@AscusClass(uses={MimeTypes.class})
enum MimeTypes_Image {

}

@AscusClass(uses={MimeTypes.class})
enum MimeTypes_Chemical {

}

@AscusClass(uses={MimeTypes.class})
enum MimeTypes_Text {

}

@AscusClass(uses={ResponseWriter.class,HTTPMethod.class,KSocket.class,Request.class,RequestParser.class})
abstract class HTTPConnection {
   private String filePath;
   private int bodySize;
   private String context;
   public Request req;
   private StringBuilder rawHeader;
   private Properties p;
   public ResponseWriter writer;
   private int headerSize;
   private KSocket socket;
   private HTTPMethod method;
   private Properties o;
   public abstract void setHeader(String name,String value);
   public abstract String getHeader(String name);
   public abstract String getOption(String name);
   public abstract void setMethod(HTTPMethod method);
   public abstract byte[] getBodyBytes();
   public abstract String getBody();
   public abstract HashMap<String,byte[]> getMultiPart();
   public abstract byte[] getFormData(String name);
   public abstract String getFormDataString(String name);
   public abstract void setRequestParser(RequestParser requestParser);
}

@AscusClass(uses={KSocket.class,RequestParser.class,HTTPHandler.class,HTTPConnection.class})
abstract class RouterFiber implements Runnable {
   public RouterFiber(KSocket s,Set<Entry<String,Class<Object>>> routes,Set<Entry<String,SimpleEntry<Class<Object>,String>>> files,Set<Entry<String,InetSocketAddress>> proxies,HashMap<String,HashMap<String,String>> overrides) { }
   public abstract void run();
}

@AscusClass(uses={KSocket.class})
abstract class SocketListener extends Thread {
   private int workers;
   public abstract void tryStop();
   public abstract void run();
}

@AscusClass(uses={MimeTypes.class})
enum MimeTypes_Audio {

}

@AscusClass(uses={KSocket.class,ResponseHeader.class})
abstract class ResponseWriter {
   public boolean rh;
   public ResponseHeader header;
   public ResponseWriter(KSocket KSocket) { }
   public abstract void setLength(int len);
   public abstract void writeHeader();
   public abstract void append(String s);
   public abstract void append(byte[] b,int i,int len);
   public abstract void appendLine(String s);
   public abstract void finish();
   public abstract void write(String s);
   public abstract void write(byte[] b,int i1,int i2);
   public abstract void writeAll(String s);
   public abstract void writeResponse(int responseCode,String s);
   public abstract void writeResponseCompressed(int responseCode,String s);
   public abstract void writeResponse(int responseCode,byte[] b,int i,int len);
   public abstract void writeAll(byte[] b,int i,int len);
}

@AscusClass(uses={KSocket.class,HTTPConnection.class})
abstract class RequestParser {
   private int errCode;
   private HTTPConnection connection;
   public RequestParser(KSocket KSocket) { }
   public abstract String getRoute();
   public abstract String getStatus();
   public abstract void parseResponseHeader();
   public abstract void parseHeader();
   public abstract void getBody();
   public abstract void getMultiPartBody();
}

@AscusClass
enum HTTPMethod {
HEAD, GET, POST, OPTIONS
}

@AscusClass(uses={MimeTypes.class})
enum MimeTypes_Video {

}

@AscusClass
abstract class KSocket {
   private Socket socket;
   private char lastChar;
   private String lastLine;
   private int lastInt;
   public KSocket(Socket socket) { }
   public KSocket(Socket socket,int lineBufferSize) { }
   public abstract void flush();
   public abstract void close();
   public abstract byte readByte(int i);
   public abstract int readInt(int i);
   public abstract char readChar();
   public abstract int readBytes(byte[] b,int start,int len);
   public abstract int readBytes(byte[] b);
   public abstract String readLineString(byte[][] endSeq);
   public abstract int readLineBytes(byte[] b,int limit,byte[][] endSeq);
   public abstract void writeByte(int b);
   public abstract void writeInt(int i);
   public abstract void writeBytes(byte[] bytes,int start,int len);
   public abstract void writeBytes(byte[] bytes);
   public abstract void writeString(String s);
   public abstract void writeChar(int c);
   public abstract void writeChars(String s);
   public abstract void setLineBufferSize(int size);
}

@AscusClass(uses={MimeTypes.class})
enum MimeTypes_Application {

}

}

