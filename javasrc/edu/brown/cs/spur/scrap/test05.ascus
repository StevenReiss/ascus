@Ascus(source="GITREPO:https://github.com/d3adspace/mantikor/blob/1f3d549e21ce7491a0b7ca4385c7609f0e6ed27c/file-server/src/main/java/de/d3adspace/mantikor/server/file/MantikorFileServerApp.java")
@Ascus(library="org.slf4j:slf4j-api:2.0.0-alpha1")
@Ascus(library="io.sitoolkit.cv:sit-cv-tools:1.0.0-beta.5")
@Ascus(library="io.github.cloudiator.lance:server:0.1.0")
@Ascus(library="com.google.appengine:appengine-api-labs:1.9.80")
@Ascus(library="com.google.errorprone:error_prone_core:2.4.0")
@Ascus(search="PACKAGE,PACKAGE_USED,500,GITREPO")
@Ascus(keywords={"@embedded","@web","server"})
@Ascus(keyterms={"server","request","ftp","@web","uri","url","routing","application","port","response","@embedded","property","http","callback","https"})
package edu.brown.cs.SAMPLE;

import edu.brown.cs.sump.annot.Ascus;
import edu.brown.cs.sump.annot.AscusPackage;
import edu.brown.cs.sump.annot.AscusClass;
import java.io.BufferedReader;
import java.net.URI;
import java.util.Map;

@AscusPackage
public interface MantikorFileServerApp {


@AscusClass(uses={HttpVersion.class,HttpRequestLine.class,HttpMethod.class})
abstract class HttpRequest extends HttpMessage {
   public abstract URI getUri();
}

/**
 * Wrapper around HTTP headers.
 */
@AscusClass(uses={HttpResponse_Builder.class})
class HttpHeaders {
   private Map<String,String> headers;
}

@AscusClass(uses={HttpVersion.class,HttpMethod.class})
class HttpRequestLine {
   private HttpVersion version;
   private URI uri;
   private HttpMethod method;
}

@AscusClass
enum HttpStatus {
OK, FORBIDDEN, NOT_FOUND, INTERNAL_SERVER_ERROR;
   public HttpStatus(int statusCode,String statusMessage) { }
}

@AscusClass
class HttpBody {
   private char[] content;
}

@AscusClass(uses={HttpVersion.class,HttpStatusLine.class,HttpStatus.class,HttpResponse_Builder.class})
class HttpResponse extends HttpMessage {
}

@AscusClass(uses={HttpResponse.class})
interface HttpRequestProcessor {
   HttpResponse processRequest(HttpRequest request);
}

@AscusClass(uses={HttpVersion.class,HttpStatus.class})
class HttpStatusLine {
   private HttpVersion version;
   private HttpStatus status;
}

@AscusClass(uses={HttpBody.class,HttpHeaders.class,HeaderPair.class})
abstract class AbstractHttpMessageFactory {
   public abstract HttpHeaders parseHeaders(BufferedReader reader);
   public abstract HttpBody parseBody(HttpHeaders httpHeaders,BufferedReader reader);
}

@AscusClass
class HttpResponseEncoder {
}

@AscusClass(uses={HttpVersion.class,HttpHeaders.class,HttpStatus.class,HttpResponse.class})
abstract class HttpResponse_Builder {
   public abstract HttpResponse build();
   public abstract HttpResponse_Builder withStatus(HttpStatus status);
   public abstract HttpResponse_Builder withVersion(HttpVersion version);
}

@AscusClass
abstract class AbstractHttpComposer {
   public abstract StringBuffer encodeHeadersAndBody(HttpMessage message);
}

@AscusClass
abstract class HttpHeaders_Builder {
   public abstract HttpHeaders build();
}

@AscusClass
class HttpRequestDecoder {
}

/**
 * Initializer for all connections.
 * @author Felix 'SasukeKawaii' Klauke
 */
@AscusClass(uses={HttpRequestProcessor.class})
class MantikorServerChannelInitializer {
}

@AscusClass
abstract class MantikorConfig {
   public abstract String getServerHost();
}

@AscusClass(uses={HttpRequestProcessor.class})
class MantikorConnection {
}

@AscusClass(uses={HttpBody.class,HttpHeaders.class})
abstract class HttpMessage {
   public HttpMessage(HttpHeaders headers,HttpBody body) { }
   public abstract HttpBody getBody();
   public abstract HttpHeaders getHeaders();
}

@AscusClass(uses={AbstractHttpMessageFactory.class})
abstract class HeaderPair {
   public abstract String getKey();
}

@AscusClass
enum HttpVersion {
HTTP_VERSION_1_0, HTTP_VERSION_1_1, HTTP_VERSION_2_0;
   public HttpVersion(String version) { }
}

@AscusClass
enum HttpMethod {
GET, HEAD, POST, PUT, DELETE,
CONNECT, OPTIONS, TRACE
}

/**
 * Basic interface for server actions.
 * @author Felix 'SasukeKawaii' Klauke
 */
@AscusClass
interface Mantikor {
/**
 * Basic interface for server actions.
 * @author Felix 'SasukeKawaii' Klauke
 */
   boolean isRunning();
/**
 * Basic interface for server actions.
 * @author Felix 'SasukeKawaii' Klauke
 */
   void stop();
/**
 * Basic interface for server actions.
 * @author Felix 'SasukeKawaii' Klauke
 */
   void start();
}

