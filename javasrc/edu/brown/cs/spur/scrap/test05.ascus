@Ascus(source="GITREPO:https://github.com/shannah/CN1Webserver/blob/a3edc053c14e53dc8640efb85e716ef6ba062c56/native/and
roid/com/codename1/webserver/NativeWebServerImpl.java")
@Ascus(search="PACKAGE,PACKAGE_USED,500,GITREPO")
@Ascus(keywords={"@embedded","@web","server"})
@Ascus(keyterms={"server","request","ftp","@web","uri","url","routing","application","port","response","@embedded","pro
perty","http","callback","https"})
@Ascus(suggestedTerms={"server","socket","output","web","native","port"})
package edu.brown.cs.sample;

import edu.brown.cs.sump.annot.Ascus;
import edu.brown.cs.sump.annot.AscusPackage;
import edu.brown.cs.sump.annot.AscusClass;
import java.io.File;

@AscusPackage
public interface EmbeddedWebServer {


/**
 * Implementation of a very basic HTTP server. The contents are loaded from the assets folder. This server handles one
request at a time. It only supports GET method.
 */
@AscusClass
abstract class SimpleWebServer implements Runnable {
/**
 * True if the server is running.
 */
   private boolean mIsRunning;
/**
 * WebServer constructor.
 */
   public SimpleWebServer(int port,File docRoot) { }
/**
 * This method starts the web server listening to the specified port.
 */
   public abstract void start();
/**
 * This method stops the web server
 */
   public abstract void stop();
   public abstract int getPort();
   public abstract void run();
}

/**
 * @author shannah
 */
@AscusClass(uses={NativeWebServer.class})
abstract class WebServer {
   private NativeWebServer peer;
   public WebServer(String docRoot,int port) { }
   public abstract void start();
   public abstract void stop();
}

/**
 * @author shannah
 */
@AscusClass
interface NativeWebServer extends NativeInterface {
   boolean isRunning();
   boolean start(String docRoot,int port);
   boolean stop();
}

/**
 * Invoked to indicate that an exception occurred, it is up to the developer to decide whether to send the device log
to the server by invoking Log.sendLog(). Notice that sending a log only works for paid accounts. This interface should
be registered with the Display class. <p>Notice that exceptions will only be reported for threads created by Codename
One using the API's within the Display class, this will not work for exceptions within threads that are created by the
new Thread() API.
 * @author Shai Almog
 */
@AscusClass
interface CrashReport {
/**
 * Callback for an exception that was not handled by the developer
 * @param t the exception
 */
   void exception(Throwable t);
}

@AscusClass(uses={SimpleWebServer.class})
class SimpleWebServer_TextUtils {
}

/**
 * This is a marker interface that should be extended by a user interface in order to indicate that said interface is
implemented in native code.
 * @author Shai Almog
 */
@AscusClass
interface NativeInterface {
/**
 * Indicates whether this native interface is supported on the current platform
 * @return true if the native interface is supported on the given platform
 */
   boolean isSupported();
}

}
